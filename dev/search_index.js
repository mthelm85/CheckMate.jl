var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CheckMate","category":"page"},{"location":"#CheckMate","page":"Home","title":"CheckMate","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CheckMate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CheckMate]","category":"page"},{"location":"#CheckMate.check_columns-Tuple{CheckSet, String}","page":"Home","title":"CheckMate.check_columns","text":"check_columns(checkset::CheckSet, check_name::String)::Vector{Symbol}\n\nRetrieve the column names for a specific named check.\n\nArguments\n\ncheckset::CheckSet: A checkset object.\ncheck_name::String: The name of the specific check to retrieve column names for.\n\nReturns\n\nA vector of column names used in the specified check.\n\nExamples\n\ncolumns = check_columns(checkset, \"column_type_check\")  # Returns [:a, :b]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.check_names-Tuple{CheckSet}","page":"Home","title":"CheckMate.check_names","text":"check_names(checkset::CheckSet)::Vector{String}\n\nRetrieve the names of all checks in a given checkset.\n\nArguments\n\ncheckset::CheckSet: A checkset object.\n\nReturns\n\nA vector of check names in the specified checkset.\n\nExamples\n\nnames = check_names(checkset)  # Returns [\"check1\", \"check2\", ...]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.execution_time-Tuple{CheckSummary}","page":"Home","title":"CheckMate.execution_time","text":"execution_time(summary::CheckSummary)::Float64\n\nRetrieve the total execution time of all checks.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\n\nReturns\n\nTotal execution time in seconds.\n\nExamples\n\ntime = execution_time(summary)  # Returns execution time in seconds\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.failed_checks-Tuple{CheckSummary}","page":"Home","title":"CheckMate.failed_checks","text":"failed_checks(summary::CheckSummary)::Vector{String}\n\nRetrieve the names of all checks that did not pass.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\n\nReturns\n\nA vector of check names that failed (did not pass).\n\nExamples\n\nchecks = failed_checks(summary)  # Returns ['check1', 'check2', ...]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.failing_rows-Tuple{CheckResult}","page":"Home","title":"CheckMate.failing_rows","text":"failing_rows(result::CheckResult)::Vector{Int}\n\nRetrieve the row indices that failed for a specific check result.\n\nArguments\n\nresult::CheckResult: A result object for a single check.\n\nReturns\n\nA vector of row indices that failed the check.\n\nExamples\n\nfailed_indices = failing_rows(result)  # Returns [2, 5, 8, ...]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.failing_rows-Tuple{CheckSummary, String}","page":"Home","title":"CheckMate.failing_rows","text":"failing_rows(summary::CheckSummary, check_name::String)::Vector{Int}\n\nRetrieve the row indices that failed for a specific named check.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\ncheck_name::String: The name of the specific check to retrieve failing rows for.\n\nReturns\n\nA vector of row indices that failed the specified check.\n\nThrows\n\nErrorException if the specified check name is not found in the summary.\n\nExamples\n\nfailed_indices = failing_rows(summary, \"column_type_check\")  # Returns [3, 7, 10, ...]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.failing_rows-Tuple{CheckSummary}","page":"Home","title":"CheckMate.failing_rows","text":"failing_rows(summary::CheckSummary)::Vector{Int}\n\nRetrieve all unique failing row indices across all checks.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\n\nReturns\n\nA sorted vector of unique row indices that failed any check.\n\nExamples\n\nall_failed_indices = failing_rows(summary)  # Returns [1, 2, 5, 8, ...]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.pass_rate-Tuple{CheckSummary, String}","page":"Home","title":"CheckMate.pass_rate","text":"pass_rate(summary::CheckSummary, check_name::String)::Float64\n\nCalculate the pass rate for a specific check based on number of rows that passed.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\ncheck_name::String: The name of the specific check to calculate pass rate for.\n\nReturns\n\nPercentage of rows that passed the specified check, rounded to one decimal place (0-100).\n\nExamples\n\nrate = pass_rate(summary, \"column_type_check\")  # Returns 95.0 if 95% of rows passed this check\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.pass_rate-Tuple{CheckSummary}","page":"Home","title":"CheckMate.pass_rate","text":"pass_rate(summary::CheckSummary)::Float64\n\nCalculate the percentage of rows that passed all checks.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\n\nReturns\n\nPercentage of rows that passed all checks, rounded to one decimal place (0-100).\n\nExamples\n\nrate = pass_rate(summary)  # Returns 95.0 if 95% of rows passed all checks\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.passed_checks-Tuple{CheckSummary}","page":"Home","title":"CheckMate.passed_checks","text":"passed_checks(summary::CheckSummary)::Vector{String}\n\nRetrieve the names of all checks that passed successfully.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\n\nReturns\n\nA vector of check names that passed.\n\nExamples\n\nchecks = passed_checks(summary)  # Returns ['check3', 'check4', ...]\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.run_checkset-Tuple{Any, CheckSet}","page":"Home","title":"CheckMate.run_checkset","text":"run_checkset(data, checkset::CheckSet; threaded::Bool=false)::CheckSummary\n\nExecute a complete set of validation checks on the provided data.\n\nRuns all checks in a given CheckSet, with options for sequential or parallel execution.\n\nArguments\n\ndata: The dataset to be validated (must support Tables.jl interface)\ncheckset::CheckSet: A collection of checks to be performed\nthreaded::Bool: Whether to run checks in parallel (default: false)\n\nReturns\n\nA CheckSummary containing:\n\nName of the checkset\nResults of individual checks\nTotal execution time\n\nExamples\n\nsummary = run_checkset(dataset, payment_checks, threaded=true)\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.total_failures-Tuple{CheckSummary}","page":"Home","title":"CheckMate.total_failures","text":"total_failures(summary::CheckSummary)::Int\n\nCalculate the total number of failing rows across all checks.\n\nArguments\n\nsummary::CheckSummary: A summary object containing the results of multiple checks.\n\nReturns\n\nTotal count of rows that failed validation across all checks.\n\nExamples\n\ntotal_failed = total_failures(summary)  # Returns the total number of failing rows\n\n\n\n\n\n","category":"method"},{"location":"#CheckMate.@checkset-Tuple{Any, Any}","page":"Home","title":"CheckMate.@checkset","text":"@checkset(name::String, block::Expr)::CheckSet\n\nCreate a named set of data validation checks.\n\nArguments\n\nname: A descriptive name for the set of checks\nblock: A block of check definitions using @check syntax\n\nExamples\n\n# Define your check functions\nfunction check_amount_positive(amount)\n    amount > 0\nend\n\nfunction check_valid_currency(currency)\n    currency in (\"USD\", \"EUR\", \"GBP\")\nend\n\n# Create a checkset\nchecks = @checkset \"Payment Validation\" begin\n    @check \"Amount is positive\" check_amount_positive(:amount)\n    @check \"Valid currency\" check_valid_currency(:currency)\nend\n\nNote: Check conditions must be defined as named functions. Lambda expressions  (e.g., x -> x > 0) are not supported.\n\n\n\n\n\n","category":"macro"}]
}
